package car;
import com.ftn.sbnz.model.models.Symptom
import com.ftn.sbnz.model.models.Breakdown
import com.ftn.sbnz.model.models.ElectricCar
import com.ftn.sbnz.model.models.GasCar
import com.ftn.sbnz.model.models.Car
import com.ftn.sbnz.model.models.Lamp
import com.ftn.sbnz.model.models.FaultCodes
import com.ftn.sbnz.model.models.Util
import com.ftn.sbnz.model.models.FaultProblems.*
import com.ftn.sbnz.model.models.FaultProblems.MotorProblem
import com.ftn.sbnz.model.models.FaultProblems.PowertrainProblems
import com.ftn.sbnz.model.models.FaultProblems.InvertorProblem
import com.ftn.sbnz.model.models.FaultProblems.FaultProblemKinds
import java.util.ArrayList;
import java.util.List;
import com.ftn.sbnz.model.models.Repairment

rule "broken battery if headlights are on and engine is not starting"
    when
        $breakdown : Breakdown($car: car)
        eval($car instanceof GasCar)
        exists Symptom( this == Symptom.NO_START ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        not Symptom( this != Symptom.NO_START && this != Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
    then
        System.out.println("Pokvaren akumulator!");
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Potrebno je zameniti akumulator."));
end

rule "run out of gas if headlights are on and engine is cranking and low gas "
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.CRANKING ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.EMPTY_TANK ) from $breakdown.getSymptoms()
        not Symptom( this != Symptom.CRANKING && this != Symptom.HEADLIGHTS_ON && this != Symptom.EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println("Automobil ostao bez goriva!");
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Potrebno je natociti gorivo."));
end


rule "low battery if headlights are on and engine is cranking and low gas "
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.CRANKING ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.NOT_EMPTY_TANK ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_FLUCTUATE ) from $breakdown.getSymptoms()
        not Symptom( this != Symptom.HEADLIGHTS_FLUCTUATE && this != Symptom.CRANKING && this != Symptom.HEADLIGHTS_ON && this != Symptom.EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println("Prazan akumulator!");
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Potrebno je napuniti akumulator."));
end


rule "run out of gas if headlights are on and engine is on and low gas "
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.START ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.EMPTY_TANK ) from $breakdown.getSymptoms()
        not Symptom(this != Symptom.CRANKING && this != Symptom.HEADLIGHTS_ON && this != Symptom.EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println(" Automobil ostao bez goriva!");
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Potrebno je natociti gorivo."));
end

rule "undefind breakdown if headlights are on and car is cranking and tank is not empty and not fluctuating"
    when
        $breakdown : Breakdown($car: car)
        eval($car instanceof GasCar)
        exists Symptom( this == Symptom.CRANKING ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.NOT_EMPTY_TANK ) from $breakdown.getSymptoms()
        not Symptom(this != Symptom.CRANKING && this != Symptom.HEADLIGHTS_ON && this != Symptom.NOT_EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println("Uzrok kvara se ne moze indentifikovati na osnovu trenutnih simptoma!");
end

rule "flooded car if headlights are on and engine is on and not low gas and present gas scent "
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.START ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.NOT_EMPTY_TANK ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.FUEL_SCENT) from $breakdown.getSymptoms()
        not Symptom( this != Symptom.FUEL_SCENT && this != Symptom.START && this != Symptom.HEADLIGHTS_ON && this != Symptom.EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println("Automobil je potopljen!");
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Auto je bio potopljen. Potrebno je isusiti vozilo. Zatim vise puta dati kontakt prije pokusaja paljenja"));
end

rule "flooded car if headlights are on and engine is on and not low gas and present gas scent PERIODICALLY "
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.START ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.NOT_EMPTY_TANK ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.PERIODICALLY_FUEL_SCENT) from $breakdown.getSymptoms()
        not Symptom( this != Symptom.PERIODICALLY_FUEL_SCENT && this != Symptom.START && this != Symptom.HEADLIGHTS_ON && this != Symptom.EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println("Automobil je potopljen!");
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Auto je bio potopljen. Potrebno je isusiti vozilo. Zatim vise puta dati kontakt prije pokusaja paljenja"));
end

rule "undefind breakdown if headlights are on and engine is on and not low gas"
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.START ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.NOT_EMPTY_TANK ) from $breakdown.getSymptoms()
        not Symptom(this != Symptom.START && this != Symptom.HEADLIGHTS_ON && this != Symptom.EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println("Uzrok kvara se ne moze indentifikovati na osnovu trenutnih simptoma!");
end

rule "undefind breakdown if headlights are on and engine is on and uncertain gas level"
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.START ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.UNCERTAIN_AMOUNT_OF_GAS ) from $breakdown.getSymptoms()
        not Symptom(this != Symptom.START && this != Symptom.HEADLIGHTS_ON && this != Symptom.UNCERTAIN_AMOUNT_OF_GAS) from $breakdown.getSymptoms()
    then
        System.out.println("Uzrok kvara se ne moze indentifikovati na osnovu trenutnih simptoma!");
end

rule "out of gas if headlights are on and periodically cranking and low on gas"
    when
        $breakdown : Breakdown($car: car)
          eval($car instanceof GasCar)
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.PERIODICALLY_CRANKING ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.EMPTY_TANK ) from $breakdown.getSymptoms()
        not Symptom(this != Symptom.PERIODICALLY_CRANKING && this != Symptom.HEADLIGHTS_ON && this != Symptom.EMPTY_TANK) from $breakdown.getSymptoms()
    then
        System.out.println(" Automobil ostao bez goriva!");
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Potrebno je natociti gorivo"));
end

rule "engine check lamp is on"
    when
        $car: Car($p: plate)
        exists Lamp(plate == $p, lampKind=="Engine") from $car.getLamps()
    then
        modify($car){setPotentionalEngineIssue(true);}
        System.out.println("LEVEL 1!");

end

rule "potential engine issue and strange noise during acceleration"
    when
        $car: Car(potentionalEngineIssue == true)
        $breakdown : Breakdown(car == $car)
        exists Symptom( this == Symptom.WEIRD_NOISE_ACCELERATION ) from $breakdown.getSymptoms()
    then
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        modify((GasCar)$car){setPotentionalTurbineIssue(true);}
        System.out.println("LEVEL 2!");
end

rule "potential engine issue and hight engine temp"
    when
        $car: Car(potentionalEngineIssue == true)
        $breakdown : Breakdown(car == $car)
        exists Symptom( this == Symptom.HIGH_ENGINE_TEMP ) from $breakdown.getSymptoms()
    then
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(true);}
end

rule "potential turbine issue and white smoke"
    when
        $car: GasCar(potentionalTurbineIssue == true)
        $breakdown : Breakdown(car == $car)
        exists Symptom( this == Symptom.WHITE_SMOKE ) from $breakdown.getSymptoms()
    then
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Potrebno je uraditi reparaciju turbine ili ugraditi novu tubinu."));
        System.out.println("LEVEL 3!");
end

rule "potential cooling issue and low liquid"
    when
        $car: GasCar(potentionalCoolingLeakage == true)
        $breakdown : Breakdown($car == car)
        exists Symptom( this == Symptom.LOW_COOLING_LIQUID ) from $breakdown.getSymptoms()
    then
        modify((GasCar)$car){setPotentionalTurbineIssue(false);}
        modify((GasCar)$car){setPotentionalCoolingLeakage(false);}
        modify((GasCar)$car){setPotentionalEngineIssue(false);}
        insert(new Repairment(null, 100, null, null, null, "Potrebno je zameniti bocu za cuvanje rashladne tecnosti."));
end

// maybe CEP
// rule "25. Potential battery problem"
// when
//     $breakdown : Breakdown($car: car)
//     Car(batterySOCDropSignificant: true, name: $name)
// then
//     System.out.println($name + ": Flag as potential battery problem");
//     modify($car) {
//         setBrokenBattery(true)
//     }
// end

// rule "26. Check health of batteries and charging system"
// when
//     $breakdown : Breakdown()
//     Car(suddenLossOfPowerOrRange: true, name: $name)
// then
//     System.out.println($name + ": Check for health of batteries and charging system");
// end

// if the battery is not bad check engine, battery is CEP part, later implementation
rule "55. Check A fault"
agenda-group "checking faults"
    when
        $problem: FaultProblem(getClass() == FaultProblem.class, kind == FaultProblemKinds.NONE )
        $breakdown : Breakdown($car: car instanceof ElectricCar, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
        exists FaultCodes( this == FaultCodes.ELECTRICAL_CODE_A ) from $codes
         $code: FaultCodes( this == FaultCodes.ELECTRICAL_CODE_A ) from $codes
    then
        System.out.println("Powertrain problem " + $code);
        modify($problem){
            setKind(FaultProblemKinds.POWERTRAIN);
        }

end

rule "56. Check B fault"
agenda-group "checking faults"
    when
     $problem: FaultProblem(getClass() == FaultProblem.class, kind == FaultProblemKinds.NONE )
        $breakdown : Breakdown($car: car instanceof ElectricCar, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
        exists FaultCodes( this == FaultCodes.ELECTRICAL_CODE_B ) from $codes
         $code: FaultCodes( this == FaultCodes.ELECTRICAL_CODE_B ) from $codes
    then
        System.out.println("Auxiliary systems problem " + $code);
         modify($problem){
            setKind(FaultProblemKinds.AUXILIARY);
        }
end

rule "57. Check C fault"
agenda-group "checking faults"
    when
     $problem: FaultProblem(getClass() == FaultProblem.class, kind == FaultProblemKinds.NONE )
        $breakdown : Breakdown($car: car instanceof ElectricCar, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
        exists FaultCodes( this == FaultCodes.ELECTRICAL_CODE_C ) from $codes
         $code: FaultCodes( this == FaultCodes.ELECTRICAL_CODE_C ) from $codes
    then
        System.out.println("Regenerative breaking problem " + $code);
           modify($problem){
            setKind(FaultProblemKinds.REGENERATIVE_BREAKING);
        }
end

rule "NN. Check Powertrain problems"
agenda-group "checking faults"
    when
                
        $problem: FaultProblem(kind == FaultProblemKinds.POWERTRAIN, $breakdownId: breakdownId)
        $breakdown : Breakdown(id == $breakdownId, $car: car instanceof ElectricCar, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
    then
        System.out.println("Powertrain problem ");
        insert(Util.checkPowertrain($breakdownId));
        delete($problem);
end

rule "NN. Check AUXILIARY problems"
agenda-group "checking faults"
    when
                
        $problem: FaultProblem(kind == FaultProblemKinds.AUXILIARY, $breakdownId: breakdownId)
        $breakdown : Breakdown($car: car instanceof ElectricCar, id == $breakdownId, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
    then
        System.out.println("AUXILIARY problem ");
        insert(Util.checkAuxiliary($breakdownId));
          delete($problem);
end

rule "NN. Check Regenerative breaking problems"
agenda-group "checking faults"
    when
                
        $problem: FaultProblem(kind == FaultProblemKinds.REGENERATIVE_BREAKING, $breakdownId: breakdownId)
        $breakdown : Breakdown($car: car instanceof ElectricCar, id == $breakdownId, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
    then
        System.out.println("Regenerative breaking problem ");
        insert(Util.checkRegenerativeBreaking($breakdownId));
          delete($problem);
end

// Regenerative breaking problem
rule "58. Check motor low response"
agenda-group "checking faults"
    when
        MotorProblem(responsivness < 40, $breakdownId: breakdownId)
        $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Motor responsivness is bad ");
        insert(new Repairment(null, 300.0, null, null, $breakdown, "Motor responsivness is bad, change motor", 0));
end

rule "59. Check motor high response"
agenda-group "checking faults"
    when
        MotorProblem(responsivness >= 40, $breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Invertor is bad ");
         insert(new Repairment(null, 200.0, null, null, $breakdown, "Motor is ok, but invertor is bad, replace it ", 0));
end

rule "60. Check invertor"
agenda-group "checking faults"
    when
        InvertorProblem(resistance > 1000.0, $breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Invertor is bad ");
         insert(new Repairment(null, 20.0, null, null, $breakdown, "Invertor resisstance is bad, replace invertor ressistor", 0));
end

rule "NN. Check invertor ressistance good"
agenda-group "checking faults"
    when
        InvertorProblem(resistance <= 1000.0, $breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Invertor is bad ");
         insert(new Repairment(null, 200.0, null, null, $breakdown, "Invertor is bad, replace it", 0));
end

rule "61. Check HVAC stuck"
agenda-group "checking faults"
    when
        HVACProblem(hvacKind == HVACProblemKinds.STUCK, $breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Air conditioning fan is stuck ");
         insert(new Repairment(null, 15.0, null, null, $breakdown, "Air conditioning fan is stuck, replace the fan ", 0));
end

rule "62. Check HVAC leakage"
agenda-group "checking faults"
    when
        HVACProblem(hvacKind == HVACProblemKinds.LEAKAGE, $breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Air codnitioning system has leakage ");
         insert(new Repairment(null, 60.0, null, null, $breakdown, "Air codnitioning system has leakage, replace tubes and fill it again", 0));
end

rule "63. Check infoteinment"
agenda-group "checking faults"
    when
        InfotainmentProblem($breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Infoteinment is bad ");
         insert(new Repairment(null, 40.0, null, null, $breakdown, "Infoteinment has problems, check display and radio", 0));
end

rule "64. Wheel speed sensors"
agenda-group "checking faults"
    when
        WheelSpeedProblem(matching < 80.0, $breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Wheel speed is not matching ");
        insert(new Repairment(null, 30.0, null, null, $breakdown, "Wheel speed is not matching, look for any physical damage, such as a broken wire or sensor that is covered in debris. Clean the sensors if necessary.", 0));
end

rule "NN. Wheel speed sensors"
agenda-group "checking faults"
    when
        WheelSpeedProblem(matching > 80.0, $breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Wheel speed is matching");
        insert(new Repairment(null, 50.0, null, null, $breakdown, "Wheel speed is matching but there is something wrong with regenerative breaking", 0));
end

rule "65. Breaking sensors"
agenda-group "checking faults"
    when
        BreakingSensorsProblem($breakdownId: breakdownId)
         $breakdown : Breakdown(id == $breakdownId)
    then
        System.out.println("Breaking sensors is bad ");
         insert(new Repairment(null, 30.0, null, null, $breakdown, "Breaking sensors have problems, replace them", 0));
end


rule "27. Investigate potential engine failure"
    when
        $breakdown : Breakdown()
        exists Symptom( this == Symptom.UNUSUAL_NOISE ) from $breakdown.getSymptoms()
    then
        System.out.println("Investigate potential engine failure");
        insert(new Repairment(null, 300.0, null, null, $breakdown, "Investigate potential engine failure", 0));
end


rule "28. Evaluate engine management system for errors"
    when
        $breakdown : Breakdown()
        exists Symptom( this == Symptom.HESITATION || this == Symptom.JERKING ) from $breakdown.getSymptoms()
    then
        System.out.println("Evaluate engine management system for errors");
         insert(new Repairment(null, 100.0, null, null, $breakdown, "Evaluate engine management system for errors", 0));
end


rule "20. Patch tire"
    when
        $breakdown : Breakdown()
        exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.DAMAGED_TIRE ) from $breakdown.getSymptoms()
    then
        System.out.println("Patch the tire");
        insert(new Repairment(null, 20.0, null, null, $breakdown, "Patch the tire", 0));
end

rule "21. Inflate tire"
    when
        $breakdown : Breakdown($car: car)  
        exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms()
        not (exists Symptom( this == Symptom.DAMAGED_TIRE ) from $breakdown.getSymptoms())
    then
        System.out.println("Inflate the tire");
        insert(new Repairment(null, 10.0, null, null, $breakdown, "Inflate the tire", 0));
end


rule "22. Balance tire"
when
    $breakdown : Breakdown()
    not (exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms())
    exists Symptom( this == Symptom.TIRE_VIBRATING ) from $breakdown.getSymptoms()
then
    System.out.println("Balance the tires");
    insert(new Repairment(null, 20.0, null, null, $breakdown, "Balance the tires", 0));
end


rule "23. Balance tire"
when
    $breakdown : Breakdown()
    not (exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms())
    exists Symptom( this == Symptom.DIFFICULT_STEERING ) from $breakdown.getSymptoms()
then
    System.out.println("Balance the tires");
    insert(new Repairment(null, 20.0, null, null, $breakdown, "Balance the tires", 0));
end

rule "24. Optics"
when
    $breakdown : Breakdown()
    not (exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms())
    exists Symptom( this == Symptom.PULLING_TO_SIDE ) from $breakdown.getSymptoms()
then
    System.out.println("Do the optics");
    insert(new Repairment(null, 20.0, null, null, $breakdown, "Do the optics", 0));
end


