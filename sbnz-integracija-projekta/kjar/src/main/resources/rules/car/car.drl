package car;
import com.ftn.sbnz.model.models.Symptom
import com.ftn.sbnz.model.models.Breakdown
import com.ftn.sbnz.model.models.ElectricCar
import com.ftn.sbnz.model.models.GasCar
import com.ftn.sbnz.model.models.FaultCodes
import com.ftn.sbnz.model.models.Util
import com.ftn.sbnz.model.models.FaultProblems.*
import com.ftn.sbnz.model.models.FaultProblems.MotorProblem
import com.ftn.sbnz.model.models.FaultProblems.PowertrainProblems
import com.ftn.sbnz.model.models.FaultProblems.InvertorProblem
import com.ftn.sbnz.model.models.FaultProblems.FaultProblemKinds

import java.util.ArrayList;
import java.util.List;

rule "broken battery if headlights are on and engine is not starting"
    when
        $breakdown : Breakdown($car: car)
        eval($car instanceof GasCar)
        exists Symptom( this == Symptom.NO_START ) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
        not Symptom( this != Symptom.NO_START && this != Symptom.HEADLIGHTS_ON ) from $breakdown.getSymptoms()
    then
        System.out.println("Pokvaren akumulator!");
end



// maybe CEP
// rule "25. Potential battery problem"
// when
//     $breakdown : Breakdown($car: car)
//     Car(batterySOCDropSignificant: true, name: $name)
// then
//     System.out.println($name + ": Flag as potential battery problem");
//     modify($car) {
//         setBrokenBattery(true)
//     }
// end

// rule "26. Check health of batteries and charging system"
// when
//     $breakdown : Breakdown()
//     Car(suddenLossOfPowerOrRange: true, name: $name)
// then
//     System.out.println($name + ": Check for health of batteries and charging system");
// end

// if the battery is not bad check engine, battery is CEP part, later implementation
rule "55. Check A fault"
agenda-group "checking faults"
    when
        $problem: FaultProblem()
        $breakdown : Breakdown($car: car instanceof ElectricCar, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
        exists FaultCodes( this == FaultCodes.ELECTRICAL_CODE_A ) from $codes
         $code: FaultCodes( this == FaultCodes.ELECTRICAL_CODE_A ) from $codes
    then
        System.out.println("Powertrain problem " + $code);
        modify($problem){
            setKind(FaultProblemKinds.POWERTRAIN);
        }

end

rule "56. Check B fault"
agenda-group "checking faults"
    when
     $problem: FaultProblem()
        $breakdown : Breakdown($car: car instanceof ElectricCar, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
        exists FaultCodes( this == FaultCodes.ELECTRICAL_CODE_B ) from $codes
         $code: FaultCodes( this == FaultCodes.ELECTRICAL_CODE_B ) from $codes
    then
        System.out.println("Auxiliary systems problem " + $code);
         modify($problem){
            setKind(FaultProblemKinds.AUXILIARY);
        }
end

rule "57. Check C fault"
agenda-group "checking faults"
    when
     $problem: FaultProblem()
        $breakdown : Breakdown($car: car instanceof ElectricCar, $faultCheck: car.getFaultCheck() == true, $codes: car.getCodes())
        exists FaultCodes( this == FaultCodes.ELECTRICAL_CODE_C ) from $codes
         $code: FaultCodes( this == FaultCodes.ELECTRICAL_CODE_C ) from $codes
    then
        System.out.println("Regenerative breaking problem " + $code);
           modify($problem){
            setKind(FaultProblemKinds.REGENERATIVE_BREAKING);
        }
end

rule "58. Check motor low response"
    when
        MotorProblem(responsivness < 40)
    then
        System.out.println("Motor responsivness is bad ");
end

rule "59. Check motor high response"
    when
        MotorProblem(responsivness >= 40)
    then
        System.out.println("Invertor is bad ");
end

rule "60. Check invertor"
    when
        InvertorProblem(resistance > 1000.0)
    then
        System.out.println("Invertor is bad ");
end

rule "61. Check HVAC stuck"
    when
        HVACProblem(hvacKind == HVACProblemKinds.STUCK)
    then
        System.out.println("Air conditioning fan is stuck ");
end

rule "62. Check HVAC leakage"
    when
        HVACProblem(hvacKind == HVACProblemKinds.LEAKAGE)
    then
        System.out.println("Air codnitioning system has leakage ");
end

rule "63. Check infoteinment"
    when
        InfotainmentProblem()
    then
        System.out.println("Infoteinment is bad ");
end

rule "64. Wheel speed sensors"
    when
        WheelSpeedProblem(matching < 80.0)
    then
        System.out.println("Wheel speed is not matching ");
end

rule "65. Breaking sensors"
    when
        BreakingSensorsProblem()
    then
        System.out.println("Breaking sensors is bad ");
end






rule "27. Investigate potential engine failure"
    when
        $breakdown : Breakdown()
        exists Symptom( this == Symptom.UNUSUAL_NOISE ) from $breakdown.getSymptoms()
    then
        System.out.println("Investigate potential engine failure");
end


rule "28. Evaluate engine management system for errors"
    when
        $breakdown : Breakdown()
        exists Symptom( this == Symptom.HESITATION || this == Symptom.JERKING ) from $breakdown.getSymptoms()
    then
        System.out.println("Evaluate engine management system for errors");
end

// rule "29. Check charging components for errors"
// when
//     $breakdown : Breakdown()
//     Vehicle(failsToChargeOrIntermittentProblems: true, name: $name)
// then
//     System.out.println($name + ": Check charging port, cables, and built-in charger for errors");
// end

// rule "30. Check for significantly slower charge rate"
// when
//     $breakdown : Breakdown()
//     Vehicle(significantlySlowerChargeRate: true, name: $name)
// then
//     System.out.println($orderNumber + " " + $name + ": Check for significantly slower charge rate");
// end


rule "20. Patch tire"
    when
        $breakdown : Breakdown()
        exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms()
        exists Symptom( this == Symptom.DAMAGED_TIRE ) from $breakdown.getSymptoms()
    then
        System.out.println("Patch the tire");
end

rule "21. Inflate tire"
    when
        $breakdown : Breakdown($car: car)  
        exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms()
        not (exists Symptom( this == Symptom.DAMAGED_TIRE ) from $breakdown.getSymptoms())
    then
        System.out.println("Inflate the tire");
end


rule "22. Balance tire"
when
    $breakdown : Breakdown()
    not (exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms())
    exists Symptom( this == Symptom.TIRE_VIBRATING ) from $breakdown.getSymptoms()
then
    System.out.println("Balance the tires");
end


rule "23. Balance tire"
when
    $breakdown : Breakdown()
    not (exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms())
    exists Symptom( this == Symptom.DIFFICULT_STEERING ) from $breakdown.getSymptoms()
then
    System.out.println("Balance the tires");
end

rule "24. Optics"
when
    $breakdown : Breakdown()
    not (exists Symptom( this == Symptom.FLAT_TIRE) from $breakdown.getSymptoms())
    exists Symptom( this == Symptom.PULLING_TO_SIDE ) from $breakdown.getSymptoms()
then
    System.out.println("Do the optics");
end


